package com.talent.exam.modules.teach_mng.service;

import com.talent.auth.bean.domain.TClass;
import com.talent.auth.bean.domain.Users;
import com.talent.auth.dao.TClassDao;
import com.talent.auth.dao.UsersDao;
import com.talent.base.BaseBo;
import com.talent.exam.constant.ExamConst;
import com.talent.exam.constant.ResultConst;
import com.talent.exam.dao.ExamPaperDAO;
import com.talent.exam.dao.ExamPaperDistributeDAO;
import com.talent.exam.dao.ExamStuAnswerDAO;
import com.talent.exam.domain.ExamPaper;
import com.talent.exam.domain.ExamPaperDistribute;
import com.talent.exam.domain.ExamStuAnswer;
import com.talent.exam.modules.teach_mng.model.DistributeMessage;
import com.talent.exam.modules.teach_mng.model.ExamPaperMessage;
import com.talent.exam.modules.teach_mng.model.PaperResult;
import com.talent.forex.constant.SysParamNameConst;
import com.talent.forex.util.GetDateTimeUtil;
import org.apache.log4j.Logger;
import org.hibernate.criterion.MatchMode;

import java.io.UnsupportedEncodingException;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;


/**
 * Created by 吴樟 on www.haixiangzhene.xyz
 * 2017/9/24.
 */
public class ExamBo extends BaseBo{

    private static Logger logger= Logger.getLogger(ExamBo.class);

    private ExamPaperDistributeDAO examPaperDistributeDAO;
    private TClassDao tClassDao;
    private ExamPaperDAO examPaperDAO;
    private ExamStuAnswerDAO examStuAnswerDAO;
    private UsersDao usersDao;

    /**
     * 自动批改试卷
     * 1.查看是否已经收卷，如果未收卷，则调用收卷模块
     * 2.进入批改，筛选出老师关注的答案点；并于答案进行比对
     * 3.并将答案及比对结果回写到db ==> 比较表 dispacher table、分数表
     */

    /**
     * 收卷
     * 1.修改试卷状态D
     * 2.查找所在班级的学生，提交的情况
     * 3.存在暂未提交的，则强制提交，并将其写入到exam_stu_answer表中
     */

    /**
     * 查看学生提交状况
     */


    /**
     * 分配试卷
     * 班级号  试卷号
     * 分配到学生
     */
    public DistributeMessage distributePaper(ExamPaperMessage examPaperMessage){
        TClass tClass=null;
        Integer id=examPaperMessage.getClassId();
        tClass=tClassDao.getBeanById(id);
        DistributeMessage message=new DistributeMessage();
        if (tClass==null){
            logger.info("the class id is not exits");
            message.setMessage("该班级号不存在");
            message.setCode(ResultConst.CLASSNOTEXISTS);
            return message;
        }
        ExamPaper examPaper=null;
        if((examPaper=examPaperDAO.findById(examPaperMessage.getClassId()))==null){
            logger.info("the exam paper is not exits");
            message.setMessage("该试卷不存在");
            message.setCode(ResultConst.PAPERNOTEXISTS);
            return message;
        }
        ExamPaperDistribute examPaperDistribute=new ExamPaperDistribute();
        examPaperDistribute.settClassByClassId(tClass);
        examPaperDistribute.setCreateDate(GetDateTimeUtil.getCurrentDate());
        //分发试卷时默认是use状态
        examPaperDistribute.setClassPaperStatus(ExamConst.USE);
        examPaperDistribute.setPaperNo(examPaperMessage.getPaperId());
        examPaperDistribute.setTillDate(ExamConst.TILLTIME);
        try {
            examPaperDistributeDAO.save(examPaperDistribute);
        }catch (Exception ex){
            message.setCode(ResultConst.FAIL);
            message.setMessage("分发试卷出现问题");
            return message;
        }
        //2
        //1.查询所有学生
        Collection<Users> users=queryAllStuInClass(tClass.getClassNo());
        //2.插入学生答题表，默认初始答题状态为N
        initStuAnswer(users,examPaper);
        message.setMessage("分配试卷成功");
        message.setCode(ResultConst.SUCCESS);
        return message;
    }

    //初始化答题卷
    public void initStuAnswer(Collection<Users> users,ExamPaper examPaper){
        ExamStuAnswer examStuAnswer=new ExamStuAnswer();
        for (Users user:users) {
            examStuAnswer.setUsersByStuId(user);
            examStuAnswer.setPaperGrade(0); //默认分数0
            examStuAnswer.setPaperExamStatus(ExamConst.NOTREAD);//初始答题状态
            examStuAnswer.setExamPaperByPaperNo(examPaper);
            examStuAnswer.setStuAnswer("");
            examStuAnswer.setStuAnswerTable("");
            examStuAnswerDAO.save(examStuAnswer);
        }
    }

    public Collection<Users> queryAllStuInClass(String classNo){
        Users users=new Users();
        users.setGroupOne(classNo);
        users.setUserType(SysParamNameConst.STUDENT);
        Collection<Users> userses= usersDao.getBeansByBean(users, MatchMode.EXACT);
        return userses;
    }

    /**
     * 查看可分配试卷
     */
    public List<PaperResult> queryDistributedPaper(){
        List<ExamPaper> examPapers=examPaperDAO.findAll();
        List<PaperResult> paperResults=new LinkedList<>();
        for (ExamPaper examPaper:examPapers){
            PaperResult paperResult=new PaperResult();
            try {
                paperResult.setPaperTitle(new String(examPaper.getPaperTitle(),"utf-8"));
                paperResult.setPaperNo(examPaper.getPaperNo());
            } catch (UnsupportedEncodingException e) {
                logger.error("unsupport encoding...");
                e.printStackTrace();
            }
            paperResults.add(paperResult);
        }
        return paperResults;
    }




    public ExamPaperDistributeDAO getExamPaperDistributeDAO() {
        return examPaperDistributeDAO;
    }

    public void setExamPaperDistributeDAO(ExamPaperDistributeDAO examPaperDistributeDAO) {
        this.examPaperDistributeDAO = examPaperDistributeDAO;
    }

    public TClassDao gettClassDao() {
        return tClassDao;
    }

    public void settClassDao(TClassDao tClassDao) {
        this.tClassDao = tClassDao;
    }

    public ExamPaperDAO getExamPaperDAO() {
        return examPaperDAO;
    }

    public void setExamPaperDAO(ExamPaperDAO examPaperDAO) {
        this.examPaperDAO = examPaperDAO;
    }

    public ExamStuAnswerDAO getExamStuAnswerDAO() {
        return examStuAnswerDAO;
    }

    public void setExamStuAnswerDAO(ExamStuAnswerDAO examStuAnswerDAO) {
        this.examStuAnswerDAO = examStuAnswerDAO;
    }

    public UsersDao getUsersDao() {
        return usersDao;
    }

    public void setUsersDao(UsersDao usersDao) {
        this.usersDao = usersDao;
    }
}
