package com.talent.exam.modules.admin_mng.controller;

import com.talent.exam.constant.ResultConst;
import com.talent.exam.domain.ExamContent;
import com.talent.exam.modules.admin_mng.model.*;
import com.talent.exam.modules.admin_mng.service.SubjectBo;
import com.talent.forex.core.ForexBaseAction;
import org.apache.log4j.Logger;

import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

/**
 * 知识点维护
 * Created by 吴樟 on www.haixiangzhene.xyz
 * 2017/9/11.
 */
public class SubjectAction extends ForexBaseAction {

    private final static Logger logger=Logger.getLogger(SubjectAction.class);

    /**
     * @param examRule 规则
     */
    private ExamRule examRule;

    /**
     * @param item 封装题目
     */
    private SubjectItem item;

    /**
     * @param subjectType 0:全部交易 1:人民币 2:外币对交易 3:保证金交易
     */
    private Integer subjectType;

    private SubjectBo subjectBo;

    /**
     * 根据subjectType查询
     */
    public void queryBySubjectType() throws IllegalAccessException {
        List<ExamContent> examItemLists=subjectBo.queryByExchangeType(subjectType);
        ExamResult<List<ExamContentItem>> result = new ExamResult<List<ExamContentItem>>();
        if (examItemLists!=null && !examItemLists.isEmpty()) {
            List<ExamContentItem> examContentItems = new ArrayList<ExamContentItem>();
            Iterator examItem=examItemLists.iterator();
            while (examItem.hasNext()){
                ExamContent examContent= (ExamContent) examItem.next();
                ExamContentItem examContentItem=new ExamContentItem();
                examContentItem.setExamNo(examContent.getExamNo());
                try {
                    String s=new String(examContent.getExamContent(),"utf-8");
                    examContentItem.setExamContent(s);
                    logger.info(s);
                } catch (UnsupportedEncodingException e) {
                    logger.warn("字符串转换格式出错"+e.getMessage());
                    e.printStackTrace();
                }
                examContentItems.add(examContentItem);
            }
            result.setCode(1);
            result.setError("subjectType查询成功");
            result.setMessage(examContentItems);
        }else {
            result.setCode(0);
            result.setError("查询数据为空");
            result.setMessage(null);
        }
        flushJSON(result);
    }

    /**
     * 新增题目
     */
    public void addnewExchange(){
        subjectBo.addnewExchange(item);
        ExamResult<List<ExamContentItem>> result = new ExamResult<List<ExamContentItem>>();
        result.setCode(ResultConst.SUCCESS);
        result.setError("新增题目成功");
        flushJSON(result);
    }

    /**
     * 组卷
     * 1.组卷规则:
     * 考试题目类型  类型比例  题目总数
     */
    public void managePaper(){
        try {
            List<List<ExamContentResult>> exam=subjectBo.managePaper(examRule);
            ExamResult<List<List<ExamContentResult>>> examResult=new ExamResult<>();
            examResult.setError("组卷成功");
            examResult.setCode(ResultConst.SUCCESS);
            examResult.setMessage(exam);
            flushJSON(examResult);
        } catch (IllegalAccessException e) {
            e.printStackTrace();
            throw new RuntimeException("组卷系统出错");
        }
    }

    public Integer getSubjectType() {
        return subjectType;
    }

    public void setSubjectType(Integer subjectType) {
        this.subjectType = subjectType;
    }

    public SubjectBo getSubjectBo() {
        return subjectBo;
    }

    public void setSubjectBo(SubjectBo subjectBo) {
        this.subjectBo = subjectBo;
    }

    public SubjectItem getItem() {
        return item;
    }

    public void setItem(SubjectItem item) {
        this.item = item;
    }

    public ExamRule getExamRule() {
        return examRule;
    }

    public void setExamRule(ExamRule examRule) {
        this.examRule = examRule;
    }
}
