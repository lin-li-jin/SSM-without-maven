package com.talent.exam.dao;

import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.LockMode;
import org.hibernate.Query;
import org.hibernate.criterion.Example;

import com.talent.exam.test.ExamOco;

/**
 * A data access object (DAO) providing persistence and search support for
 * ExamOco entities. Transaction control of the save(), update() and delete()
 * operations can directly support Spring container-managed transactions or they
 * can be augmented to handle user-managed Spring transactions. Each of these
 * methods provides additional information for how to configure it for the
 * desired type of transaction control.
 * 
 * @see com.talent.exam.dao.ExamOco
 * @author MyEclipse Persistence Tools
 */
public class ExamOcoDAO extends BaseHibernateDAO {
	private static final Log log = LogFactory.getLog(ExamOcoDAO.class);
	// property constants
	public static final String DIRECTION = "direction";
	public static final String ACC = "acc";
	public static final String TAKE_PROFIT_AMOUNT = "takeProfitAmount";
	public static final String TAKE_PROFIT_PRICE = "takeProfitPrice";
	public static final String STOP_LOSS_AMOUNT = "stopLossAmount";
	public static final String STOP_LOSS_PRICE = "stopLossPrice";
	public static final String MONITOR_PRICE = "monitorPrice";
	public static final String GOOD_FROM = "goodFrom";
	public static final String GOOD_TILL = "goodTill";
	public static final String STEP = "step";

	public void save(ExamOco transientInstance) {
		log.debug("saving ExamOco instance");
		try {
			getSession().save(transientInstance);
			log.debug("save successful");
		} catch (RuntimeException re) {
			log.error("save failed", re);
			throw re;
		}
	}

	public void delete(ExamOco persistentInstance) {
		log.debug("deleting ExamOco instance");
		try {
			getSession().delete(persistentInstance);
			log.debug("delete successful");
		} catch (RuntimeException re) {
			log.error("delete failed", re);
			throw re;
		}
	}

	public ExamOco findById(java.lang.Integer id) {
		log.debug("getting ExamOco instance with id: " + id);
		try {
			ExamOco instance = (ExamOco) getSession().get(
					"com.talent.exam.dao.ExamOco", id);
			return instance;
		} catch (RuntimeException re) {
			log.error("get failed", re);
			throw re;
		}
	}

	public List findByExample(ExamOco instance) {
		log.debug("finding ExamOco instance by example");
		try {
			List results = getSession()
					.createCriteria("com.talent.exam.dao.ExamOco")
					.add(Example.create(instance)).list();
			log.debug("find by example successful, result size: "
					+ results.size());
			return results;
		} catch (RuntimeException re) {
			log.error("find by example failed", re);
			throw re;
		}
	}

	public List findByProperty(String propertyName, Object value) {
		log.debug("finding ExamOco instance with property: " + propertyName
				+ ", value: " + value);
		try {
			String queryString = "from ExamOco as model where model."
					+ propertyName + "= ?";
			Query queryObject = getSession().createQuery(queryString);
			queryObject.setParameter(0, value);
			return queryObject.list();
		} catch (RuntimeException re) {
			log.error("find by property name failed", re);
			throw re;
		}
	}

	public List findByDirection(Object direction) {
		return findByProperty(DIRECTION, direction);
	}

	public List findByAcc(Object acc) {
		return findByProperty(ACC, acc);
	}

	public List findByTakeProfitAmount(Object takeProfitAmount) {
		return findByProperty(TAKE_PROFIT_AMOUNT, takeProfitAmount);
	}

	public List findByTakeProfitPrice(Object takeProfitPrice) {
		return findByProperty(TAKE_PROFIT_PRICE, takeProfitPrice);
	}

	public List findByStopLossAmount(Object stopLossAmount) {
		return findByProperty(STOP_LOSS_AMOUNT, stopLossAmount);
	}

	public List findByStopLossPrice(Object stopLossPrice) {
		return findByProperty(STOP_LOSS_PRICE, stopLossPrice);
	}

	public List findByMonitorPrice(Object monitorPrice) {
		return findByProperty(MONITOR_PRICE, monitorPrice);
	}

	public List findByGoodFrom(Object goodFrom) {
		return findByProperty(GOOD_FROM, goodFrom);
	}

	public List findByGoodTill(Object goodTill) {
		return findByProperty(GOOD_TILL, goodTill);
	}

	public List findByStep(Object step) {
		return findByProperty(STEP, step);
	}

	public List findAll() {
		log.debug("finding all ExamOco instances");
		try {
			String queryString = "from ExamOco";
			Query queryObject = getSession().createQuery(queryString);
			return queryObject.list();
		} catch (RuntimeException re) {
			log.error("find all failed", re);
			throw re;
		}
	}

	public ExamOco merge(ExamOco detachedInstance) {
		log.debug("merging ExamOco instance");
		try {
			ExamOco result = (ExamOco) getSession().merge(detachedInstance);
			log.debug("merge successful");
			return result;
		} catch (RuntimeException re) {
			log.error("merge failed", re);
			throw re;
		}
	}

	public void attachDirty(ExamOco instance) {
		log.debug("attaching dirty ExamOco instance");
		try {
			getSession().saveOrUpdate(instance);
			log.debug("attach successful");
		} catch (RuntimeException re) {
			log.error("attach failed", re);
			throw re;
		}
	}

	public void attachClean(ExamOco instance) {
		log.debug("attaching clean ExamOco instance");
		try {
			getSession().lock(instance, LockMode.NONE);
			log.debug("attach successful");
		} catch (RuntimeException re) {
			log.error("attach failed", re);
			throw re;
		}
	}
}