package com.talent.exam.dao;

import com.talent.hibernate.util.HibernateUtil;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.Criteria;
import org.hibernate.Session;
import com.talent.forex.core.HibernateSessionFactory;
import org.hibernate.criterion.Restrictions;

import java.lang.reflect.Field;
import java.util.List;


/**
 * Data access object (DAO) for domain model
 * @author MyEclipse Persistence Tools
 */
public class BaseHibernateDAO implements IBaseHibernateDAO {

	private static final Log log = LogFactory.getLog(BaseHibernateDAO.class);
	
	public Session getSession() {
		return HibernateUtil.getSession();
	}

	public<T> List<T> findByExample(T t) throws IllegalAccessException {
		if (t == null){
			log.error("t should not be null");
			throw new NullPointerException();
		}
		Class clazz=t.getClass();
		Field[] fields=clazz.getDeclaredFields();
		Field.setAccessible(fields,true);
		if (fields==null || fields.length==0)
			log.error("fields should not be null!");
		log.debug("finding ExamContent instance by example");
		try {
			Criteria criteria= getSession()
					.createCriteria(clazz.getName());
			for (Field field:fields) {
				if (field.get(t)==null || field.get(t) instanceof Integer &&  (Integer)field.get(t)==0)
					continue;
				criteria.add(Restrictions.eq(field.getName(), field.get(t)));
				log.debug("add field.getName() to select");
			}
			List<T> results=criteria.list();
			log.debug("find by example successful, result size: "
					+ results.size());
			return results;
		} catch (RuntimeException  | IllegalAccessException re) {
			log.error("find by example failed", re);
			throw re;
		}
	}
	
}